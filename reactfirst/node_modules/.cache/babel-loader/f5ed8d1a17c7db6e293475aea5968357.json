{"ast":null,"code":"import { gapi } from 'gapi-script';\n/**\n * Load the API and make an API call.  Display the results on the screen.\n */\n\nexport default function callScriptFunction() {\n  const scriptId = 'AKfycbyvFjqsIlXS1vnMzVxx60QrOT8ToT8PMrmTP3ISpdBG1tScGUkd0cjP-mu57Ntazbqy'; // Call the Apps Script API run method\n  //   'scriptId' is the URL parameter that states what script to run\n  //   'resource' describes the run request body (with the function name\n  //              to execute)\n\n  try {\n    gapi.client.script.scripts.run({\n      'scriptId': scriptId,\n      'resource': {\n        'function': 'helloWorld'\n      }\n    }).then(function (resp) {\n      const result = resp.result;\n\n      if (result.error && result.error.status) {// The API encountered a problem before the script\n        // started executing.\n        // appendPre('Error calling API:');\n        // appendPre(JSON.stringify(result, null, 2));\n      } else if (result.error) {\n        // The API executed, but the script returned an error.\n        // Extract the first (and only) set of error details.\n        // The values of this object are the script's 'errorMessage' and\n        // 'errorType', and an array of stack trace elements.\n        const error = result.error.details[0]; // appendPre('Script error message: ' + error.errorMessage);\n\n        if (error.scriptStackTraceElements) {\n          // There may not be a stacktrace if the script didn't start\n          // executing.\n          //appendPre('Script error stacktrace:');\n          for (let i = 0; i < error.scriptStackTraceElements.length; i++) {\n            const trace = error.scriptStackTraceElements[i]; //appendPre('\\t' + trace.function + ':' + trace.lineNumber);\n          }\n        }\n      } else {\n        // The structure of the result will depend upon what the Apps\n        // Script function returns. Here, the function returns an Apps\n        // Script Object with String keys and values, and so the result\n        // is treated as a JavaScript object (folderSet).\n        console.log(result);\n      }\n    });\n  } catch (err) {\n    //document.getElementById('content').innerText = err.message;\n    console.log(err);\n    console.log(\"error\");\n    return;\n  }\n}\n/*\n function callOneCellData()\n{\n  google.script.run.withSuccessHandler(function(returnData) \n  {\n     document.getElementById(\"oneCellData\").innerHTML = returnData;\n  }).getOneCellData();\n}\n\nfunction callMultiCellData()\n{\n  google.script.run.withSuccessHandler(function(returnArray) \n  {\n      console.log(returnArray);\n      var stringArray = returnArray.toString();\n      document.getElementById(\"multiData\").innerHTML = stringArray;\n  }).getMultiCellData();\n}\n\nfunction callInOutData()\n{\n  var inData = document.getElementById(\"inData\").value\n  google.script.run.withSuccessHandler(function(outData) \n  {\n      document.getElementById(\"outData\").innerHTML = outData;\n  }).getInOutData(inData);\n}\n\nfunction callData()\n{\n  callOneCellData();\n  callMultiCellData();\n  callInOutData();\n}  \n</script>\n</head>\n<body>\n<label>One Cell Data</label><br><textarea id=\"oneCellData\" ></textarea><br>\n<label>Multi Data</label><br><textarea id=\"multiData\" ></textarea><br>\n<label>In Data</label><br><input type=\"text\" id=\"inData\" /><br>\n<label>Out Data</label><br><textarea id=\"outData\" ></textarea><br>\n<input type=\"button\" onclick=\"callData()\" value=\"Get Data\" />\n</body>\n</html>\n */","map":{"version":3,"names":["gapi","callScriptFunction","scriptId","client","script","scripts","run","then","resp","result","error","status","details","scriptStackTraceElements","i","length","trace","console","log","err"],"sources":["/Users/luludesai/Desktop/CSCI401/Intuitive-Data-Display/reactfirst/src/Scripts.js"],"sourcesContent":["import { gapi } from 'gapi-script';\n\n/**\n * Load the API and make an API call.  Display the results on the screen.\n */\n export default function callScriptFunction() {\n    const scriptId = 'AKfycbyvFjqsIlXS1vnMzVxx60QrOT8ToT8PMrmTP3ISpdBG1tScGUkd0cjP-mu57Ntazbqy';\n  \n    // Call the Apps Script API run method\n    //   'scriptId' is the URL parameter that states what script to run\n    //   'resource' describes the run request body (with the function name\n    //              to execute)\n    try {\n      gapi.client.script.scripts.run({\n        'scriptId': scriptId,\n        'resource': {\n          'function': 'helloWorld',\n        },\n      }).then(function(resp) {\n        const result = resp.result;\n        if (result.error && result.error.status) {\n          // The API encountered a problem before the script\n          // started executing.\n          // appendPre('Error calling API:');\n          // appendPre(JSON.stringify(result, null, 2));\n        } else if (result.error) {\n          // The API executed, but the script returned an error.\n  \n          // Extract the first (and only) set of error details.\n          // The values of this object are the script's 'errorMessage' and\n          // 'errorType', and an array of stack trace elements.\n          const error = result.error.details[0];\n          // appendPre('Script error message: ' + error.errorMessage);\n  \n          if (error.scriptStackTraceElements) {\n            // There may not be a stacktrace if the script didn't start\n            // executing.\n            //appendPre('Script error stacktrace:');\n            for (let i = 0; i < error.scriptStackTraceElements.length; i++) {\n              const trace = error.scriptStackTraceElements[i];\n              //appendPre('\\t' + trace.function + ':' + trace.lineNumber);\n            }\n          }\n        } else {\n          // The structure of the result will depend upon what the Apps\n          // Script function returns. Here, the function returns an Apps\n          // Script Object with String keys and values, and so the result\n          // is treated as a JavaScript object (folderSet).\n            \n          console.log(result);\n          \n        }\n      });\n    } catch (err) {\n        //document.getElementById('content').innerText = err.message;\n        console.log(err);\n        console.log(\"error\");\n      return;\n    }\n  }\n\n  /*\n\n  function callOneCellData()\n  {\n    google.script.run.withSuccessHandler(function(returnData) \n    {\n       document.getElementById(\"oneCellData\").innerHTML = returnData;\n    }).getOneCellData();\n  }\n  \n  function callMultiCellData()\n  {\n    google.script.run.withSuccessHandler(function(returnArray) \n    {\n        console.log(returnArray);\n        var stringArray = returnArray.toString();\n        document.getElementById(\"multiData\").innerHTML = stringArray;\n    }).getMultiCellData();\n  }\n  \n  function callInOutData()\n  {\n    var inData = document.getElementById(\"inData\").value\n    google.script.run.withSuccessHandler(function(outData) \n    {\n        document.getElementById(\"outData\").innerHTML = outData;\n    }).getInOutData(inData);\n  }\n  \n  function callData()\n  {\n    callOneCellData();\n    callMultiCellData();\n    callInOutData();\n  }  \n  </script>\n  </head>\n  <body>\n  <label>One Cell Data</label><br><textarea id=\"oneCellData\" ></textarea><br>\n  <label>Multi Data</label><br><textarea id=\"multiData\" ></textarea><br>\n  <label>In Data</label><br><input type=\"text\" id=\"inData\" /><br>\n  <label>Out Data</label><br><textarea id=\"outData\" ></textarea><br>\n  <input type=\"button\" onclick=\"callData()\" value=\"Get Data\" />\n  </body>\n</html>\n\n  */"],"mappings":"AAAA,SAASA,IAAT,QAAqB,aAArB;AAEA;AACA;AACA;;AACC,eAAe,SAASC,kBAAT,GAA8B;EAC1C,MAAMC,QAAQ,GAAG,0EAAjB,CAD0C,CAG1C;EACA;EACA;EACA;;EACA,IAAI;IACFF,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B;MAC7B,YAAYJ,QADiB;MAE7B,YAAY;QACV,YAAY;MADF;IAFiB,CAA/B,EAKGK,IALH,CAKQ,UAASC,IAAT,EAAe;MACrB,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;MACA,IAAIA,MAAM,CAACC,KAAP,IAAgBD,MAAM,CAACC,KAAP,CAAaC,MAAjC,EAAyC,CACvC;QACA;QACA;QACA;MACD,CALD,MAKO,IAAIF,MAAM,CAACC,KAAX,EAAkB;QACvB;QAEA;QACA;QACA;QACA,MAAMA,KAAK,GAAGD,MAAM,CAACC,KAAP,CAAaE,OAAb,CAAqB,CAArB,CAAd,CANuB,CAOvB;;QAEA,IAAIF,KAAK,CAACG,wBAAV,EAAoC;UAClC;UACA;UACA;UACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACG,wBAAN,CAA+BE,MAAnD,EAA2DD,CAAC,EAA5D,EAAgE;YAC9D,MAAME,KAAK,GAAGN,KAAK,CAACG,wBAAN,CAA+BC,CAA/B,CAAd,CAD8D,CAE9D;UACD;QACF;MACF,CAlBM,MAkBA;QACL;QACA;QACA;QACA;QAEAG,OAAO,CAACC,GAAR,CAAYT,MAAZ;MAED;IACF,CAvCD;EAwCD,CAzCD,CAyCE,OAAOU,GAAP,EAAY;IACV;IACAF,OAAO,CAACC,GAAR,CAAYC,GAAZ;IACAF,OAAO,CAACC,GAAR,CAAY,OAAZ;IACF;EACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}