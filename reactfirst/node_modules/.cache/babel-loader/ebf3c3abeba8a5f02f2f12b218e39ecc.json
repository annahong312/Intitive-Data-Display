{"ast":null,"code":"/**\n * Load the API and make an API call.  Display the results on the screen.\n */\nexport default function callScriptFunction() {\n  const scriptId = 'AKfycbyvFjqsIlXS1vnMzVxx60QrOT8ToT8PMrmTP3ISpdBG1tScGUkd0cjP-mu57Ntazbqy'; // Call the Apps Script API run method\n  //   'scriptId' is the URL parameter that states what script to run\n  //   'resource' describes the run request body (with the function name\n  //              to execute)\n\n  try {\n    gapi.client.script.scripts.run({\n      'scriptId': scriptId,\n      'resource': {\n        'function': 'helloWorld'\n      }\n    }).then(function (resp) {\n      const result = resp.result;\n\n      if (result.error && result.error.status) {\n        // The API encountered a problem before the script\n        // started executing.\n        appendPre('Error calling API:');\n        appendPre(JSON.stringify(result, null, 2));\n      } else if (result.error) {\n        // The API executed, but the script returned an error.\n        // Extract the first (and only) set of error details.\n        // The values of this object are the script's 'errorMessage' and\n        // 'errorType', and an array of stack trace elements.\n        const error = result.error.details[0];\n        appendPre('Script error message: ' + error.errorMessage);\n\n        if (error.scriptStackTraceElements) {\n          // There may not be a stacktrace if the script didn't start\n          // executing.\n          appendPre('Script error stacktrace:');\n\n          for (let i = 0; i < error.scriptStackTraceElements.length; i++) {\n            const trace = error.scriptStackTraceElements[i];\n            appendPre('\\t' + trace.function + ':' + trace.lineNumber);\n          }\n        }\n      } else {\n        // The structure of the result will depend upon what the Apps\n        // Script function returns. Here, the function returns an Apps\n        // Script Object with String keys and values, and so the result\n        // is treated as a JavaScript object (folderSet).\n        console.log(result);\n      }\n    });\n  } catch (err) {\n    document.getElementById('content').innerText = err.message;\n    return;\n  }\n}","map":{"version":3,"names":["callScriptFunction","scriptId","gapi","client","script","scripts","run","then","resp","result","error","status","appendPre","JSON","stringify","details","errorMessage","scriptStackTraceElements","i","length","trace","function","lineNumber","console","log","err","document","getElementById","innerText","message"],"sources":["/Users/luludesai/Desktop/CSCI401/Intuitive-Data-Display/reactfirst/src/Scripts.js"],"sourcesContent":["/**\n * Load the API and make an API call.  Display the results on the screen.\n */\n export default function callScriptFunction() {\n    const scriptId = 'AKfycbyvFjqsIlXS1vnMzVxx60QrOT8ToT8PMrmTP3ISpdBG1tScGUkd0cjP-mu57Ntazbqy';\n  \n    // Call the Apps Script API run method\n    //   'scriptId' is the URL parameter that states what script to run\n    //   'resource' describes the run request body (with the function name\n    //              to execute)\n    try {\n      gapi.client.script.scripts.run({\n        'scriptId': scriptId,\n        'resource': {\n          'function': 'helloWorld',\n        },\n      }).then(function(resp) {\n        const result = resp.result;\n        if (result.error && result.error.status) {\n          // The API encountered a problem before the script\n          // started executing.\n          appendPre('Error calling API:');\n          appendPre(JSON.stringify(result, null, 2));\n        } else if (result.error) {\n          // The API executed, but the script returned an error.\n  \n          // Extract the first (and only) set of error details.\n          // The values of this object are the script's 'errorMessage' and\n          // 'errorType', and an array of stack trace elements.\n          const error = result.error.details[0];\n          appendPre('Script error message: ' + error.errorMessage);\n  \n          if (error.scriptStackTraceElements) {\n            // There may not be a stacktrace if the script didn't start\n            // executing.\n            appendPre('Script error stacktrace:');\n            for (let i = 0; i < error.scriptStackTraceElements.length; i++) {\n              const trace = error.scriptStackTraceElements[i];\n              appendPre('\\t' + trace.function + ':' + trace.lineNumber);\n            }\n          }\n        } else {\n          // The structure of the result will depend upon what the Apps\n          // Script function returns. Here, the function returns an Apps\n          // Script Object with String keys and values, and so the result\n          // is treated as a JavaScript object (folderSet).\n            \n          console.log(result);\n          \n        }\n      });\n    } catch (err) {\n      document.getElementById('content').innerText = err.message;\n      return;\n    }\n  }"],"mappings":"AAAA;AACA;AACA;AACC,eAAe,SAASA,kBAAT,GAA8B;EAC1C,MAAMC,QAAQ,GAAG,0EAAjB,CAD0C,CAG1C;EACA;EACA;EACA;;EACA,IAAI;IACFC,IAAI,CAACC,MAAL,CAAYC,MAAZ,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B;MAC7B,YAAYL,QADiB;MAE7B,YAAY;QACV,YAAY;MADF;IAFiB,CAA/B,EAKGM,IALH,CAKQ,UAASC,IAAT,EAAe;MACrB,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;MACA,IAAIA,MAAM,CAACC,KAAP,IAAgBD,MAAM,CAACC,KAAP,CAAaC,MAAjC,EAAyC;QACvC;QACA;QACAC,SAAS,CAAC,oBAAD,CAAT;QACAA,SAAS,CAACC,IAAI,CAACC,SAAL,CAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAT;MACD,CALD,MAKO,IAAIA,MAAM,CAACC,KAAX,EAAkB;QACvB;QAEA;QACA;QACA;QACA,MAAMA,KAAK,GAAGD,MAAM,CAACC,KAAP,CAAaK,OAAb,CAAqB,CAArB,CAAd;QACAH,SAAS,CAAC,2BAA2BF,KAAK,CAACM,YAAlC,CAAT;;QAEA,IAAIN,KAAK,CAACO,wBAAV,EAAoC;UAClC;UACA;UACAL,SAAS,CAAC,0BAAD,CAAT;;UACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACO,wBAAN,CAA+BE,MAAnD,EAA2DD,CAAC,EAA5D,EAAgE;YAC9D,MAAME,KAAK,GAAGV,KAAK,CAACO,wBAAN,CAA+BC,CAA/B,CAAd;YACAN,SAAS,CAAC,OAAOQ,KAAK,CAACC,QAAb,GAAwB,GAAxB,GAA8BD,KAAK,CAACE,UAArC,CAAT;UACD;QACF;MACF,CAlBM,MAkBA;QACL;QACA;QACA;QACA;QAEAC,OAAO,CAACC,GAAR,CAAYf,MAAZ;MAED;IACF,CAvCD;EAwCD,CAzCD,CAyCE,OAAOgB,GAAP,EAAY;IACZC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,SAAnC,GAA+CH,GAAG,CAACI,OAAnD;IACA;EACD;AACF"},"metadata":{},"sourceType":"module"}